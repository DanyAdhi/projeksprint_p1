definitions:
  dto.FileUploadRespondPayload:
    properties:
      uri:
        type: string
    type: object
  dto.UserRequestPayload:
    properties:
      action:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - action
    - email
    - password
    type: object
  dto.UserRequestUpdate:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  helper.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  helper.Response:
    properties:
      data: {}
      error: {}
    type: object
info:
  contact: {}
paths:
  /v1/auth:
    post:
      consumes:
      - application/json
      description: either create or login
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: EXISTING
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Entry for authentication or create new user
      tags:
      - auth
  /v1/file:
    post:
      consumes:
      - application/json
      description: Upload an file
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Body with file zip
        in: formData
        name: File
        required: true
        type: file
      - description: Body with file zip
        in: body
        name: FileType
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.FileUploadRespondPayload'
              type: object
        "201":
          description: File created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.FileUploadRespondPayload'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "413":
          description: Payload Too Large
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "415":
          description: Unsupported Media Type
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Upload an file
      tags:
      - file
  /v1/user:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get Profile User
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Get Profile User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Update user
      tags:
      - users
swagger: "2.0"
