definitions:
  dto.RequestLogin:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.RequestRegister:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResponseLogin:
    properties:
      token:
        type: string
    type: object
  dto.UserRequestUpdate:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  helper.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  helper.Response:
    properties:
      data: {}
      error: {}
    type: object
info:
  contact: {}
paths:
  /users:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Bearer + user token
        in: header
        name: Authorization
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "401":
          description: Unauthorization
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.RequestLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ResponseLogin'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "404":
          description: Record not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register the new user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.RequestRegister'
      produces:
      - application/json
      responses:
        "201":
          description: CREATED
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/helper.Response'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
        "409":
          description: data conflict, like email already exist
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                errors:
                  $ref: '#/definitions/helper.ErrorResponse'
              type: object
      summary: Register new user
      tags:
      - users
swagger: "2.0"
